<!DOCTYPE html>
<html lang="{{#if course.language}}{{course.language}}{{else}}en{{/if}}" class="minimal-template">
<head>
    <!-- Meta Information -->
    {{> meta}}
    
    <title>{{course.title}}</title>
    
    <!-- Minimal Template Styles -->
    <link rel="stylesheet" href="assets/css/style.css">
    
    <!-- Base Styles -->
    {{> base-styles}}
    
    <!-- Custom CSS -->
    {{#if options.customizations.customCSS}}
    <style>
        {{{options.customizations.customCSS}}}
    </style>
    {{/if}}
    
    <!-- Structured Data -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Course",
        "name": "{{course.title}}",
        "description": "{{stripHtml course.description}}",
        {{#if options.customizations.organizationName}}
        "provider": {
            "@type": "Organization",
            "name": "{{options.customizations.organizationName}}"
        },
        {{/if}}
        "courseMode": "online",
        "educationalLevel": "{{#if course.level}}{{course.level}}{{else}}beginner{{/if}}",
        {{#if summary.totalDuration}}
        "timeRequired": "PT{{summary.totalDuration}}M",
        {{/if}}
        "numberOfCredits": {{#if summary.totalSessions}}{{summary.totalSessions}}{{else}}1{{/if}}
    }
    </script>
</head>
<body class="minimal-theme" {{#if options.accessibility.highContrast}}data-high-contrast="true"{{/if}}>
    <!-- Skip to main content link -->
    <a href="#main-content" class="skip-link" aria-label="Skip to main content">Skip to content</a>
    
    <!-- Scroll progress indicator -->
    <div class="scroll-progress" role="progressbar" aria-label="Reading progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
        <div class="scroll-progress-bar"></div>
    </div>
    
    <div class="container">
        <!-- Course Header -->
        <header class="course-header" role="banner">
            {{#if options.customizations.logo}}
            <img src="{{options.customizations.logo}}" alt="{{#if options.customizations.organizationName}}{{options.customizations.organizationName}} logo{{else}}Course logo{{/if}}" class="logo">
            {{/if}}
            <h1 class="course-title">{{course.title}}</h1>
            {{#if course.description}}
            <div class="course-description" aria-label="Course description">
                {{{markdown course.description}}}
            </div>
            {{/if}}
            {{#if summary}}
            <div class="course-meta" role="region" aria-label="Course information">
                {{#if summary.totalDuration}}
                <span class="duration" aria-label="Total duration">{{formatDuration summary.totalDuration}}</span>
                {{/if}}
                {{#if summary.totalSessions}}
                <span class="sessions" aria-label="Number of sessions">{{summary.totalSessions}} Sessions</span>
                {{/if}}
                {{#if summary.totalActivities}}
                <span class="activities" aria-label="Number of activities">{{summary.totalActivities}} Activities</span>
                {{/if}}
            </div>
            {{/if}}
        </header>

        <!-- Main Content -->
        <main id="main-content" class="course-content" role="main" tabindex="-1">
            {{#if isIndexPage}}
                <!-- Table of Contents -->
                <nav class="course-navigation" role="navigation" aria-labelledby="toc-heading">
                    <h2 id="toc-heading">Course Content</h2>
                    <ol class="session-list" role="list">
                        {{#eachWithIndex sessions}}
                        <li class="session-item" role="listitem">
                            <a href="session-{{add index 1}}.html" class="session-link" aria-describedby="session-{{add index 1}}-meta">
                                <div class="session-number" aria-label="Session {{add index 1}}">{{add index 1}}</div>
                                <h3 class="session-title">{{title}}</h3>
                                {{#if estimated_duration}}
                                <div id="session-{{add index 1}}-meta" class="session-duration" aria-label="Duration">{{formatDuration estimated_duration}}</div>
                                {{/if}}
                            </a>
                        </li>
                        {{/eachWithIndex}}
                    </ol>
                </nav>
            {{else}}
                <!-- All Sessions Content -->
                {{#each sessions}}
                <article class="session" id="session-{{@index}}" role="article" aria-labelledby="session-title-{{@index}}">
                    <header class="session-header">
                        <h2 id="session-title-{{@index}}" class="session-title">{{title}}</h2>
                        {{#if description}}
                        <div class="session-description" aria-label="Session description">
                            {{{markdown description}}}
                        </div>
                        {{/if}}
                        <div class="session-meta" role="region" aria-label="Session information">
                            {{#if estimated_duration}}
                            <span class="session-duration" aria-label="Estimated duration">{{formatDuration estimated_duration}}</span>
                            {{/if}}
                        </div>
                    </header>
                    
                    <div class="session-content">
                        {{{content}}}
                    </div>

                    {{#if activities}}
                    <section class="activities" role="region" aria-labelledby="activities-heading-{{@index}}">
                        <h3 id="activities-heading-{{@index}}">Activities</h3>
                        {{#each activities}}
                        {{> activity}}
                        {{/each}}
                    </section>
                    {{/if}}
                </article>
                {{/each}}
            {{/if}}
        </main>

        <!-- Footer -->
        {{> footer}}
    </div>

    <!-- Accessibility tools -->
    {{#if options.accessibility.showTools}}
    <div class="accessibility-tools" role="toolbar" aria-label="Accessibility tools">
        <button type="button" class="a11y-button" id="font-size-increase" aria-label="Increase font size" title="Increase font size">A+</button>
        <button type="button" class="a11y-button" id="font-size-decrease" aria-label="Decrease font size" title="Decrease font size">A-</button>
        <button type="button" class="a11y-button" id="high-contrast-toggle" aria-label="Toggle high contrast" title="Toggle high contrast">◐</button>
        <button type="button" class="a11y-button" id="focus-outline-toggle" aria-label="Toggle focus outlines" title="Toggle focus outlines">□</button>
    </div>
    {{/if}}

    <!-- Scripts -->
    <script>
        (function() {
            'use strict';
            
            // Scroll progress indicator
            function updateScrollProgress() {
                const scrolled = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
                const progressBar = document.querySelector('.scroll-progress-bar');
                const progressContainer = document.querySelector('.scroll-progress');
                
                if (progressBar) {
                    progressBar.style.width = Math.max(0, Math.min(100, scrolled)) + '%';
                }
                if (progressContainer) {
                    progressContainer.setAttribute('aria-valuenow', Math.round(Math.max(0, Math.min(100, scrolled))));
                }
            }
            
            // Smooth scrolling for anchor links
            function initSmoothScrolling() {
                document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                    anchor.addEventListener('click', function (e) {
                        e.preventDefault();
                        const target = document.querySelector(this.getAttribute('href'));
                        if (target) {
                            target.scrollIntoView({
                                behavior: 'smooth',
                                block: 'start'
                            });
                            // Update focus for accessibility
                            target.focus();
                        }
                    });
                });
            }
            
            // Keyboard navigation
            function initKeyboardNavigation() {
                document.addEventListener('keydown', function(e) {
                    // Alt + H: Home/Course overview
                    if (e.altKey && e.key === 'h') {
                        const homeLink = document.querySelector('a[href="index.html"]');
                        if (homeLink) {
                            e.preventDefault();
                            homeLink.click();
                        }
                    }
                    // Tab navigation enhancement
                    else if (e.key === 'Tab') {
                        document.body.classList.add('tab-navigation');
                    }
                });
                
                // Remove tab navigation class on mouse interaction
                document.addEventListener('mousedown', function() {
                    document.body.classList.remove('tab-navigation');
                });
            }
            
            // Accessibility tools
            function initAccessibilityTools() {
                const fontSizeIncrease = document.getElementById('font-size-increase');
                const fontSizeDecrease = document.getElementById('font-size-decrease');
                const highContrastToggle = document.getElementById('high-contrast-toggle');
                const focusOutlineToggle = document.getElementById('focus-outline-toggle');
                
                let currentFontScale = parseFloat(localStorage.getItem('fontScale')) || 1;
                
                if (fontSizeIncrease) {
                    fontSizeIncrease.addEventListener('click', function() {
                        currentFontScale = Math.min(currentFontScale + 0.1, 1.5);
                        document.documentElement.style.fontSize = (currentFontScale * 100) + '%';
                        localStorage.setItem('fontScale', currentFontScale);
                        this.setAttribute('aria-pressed', 'true');
                        setTimeout(() => this.setAttribute('aria-pressed', 'false'), 200);
                    });
                }
                
                if (fontSizeDecrease) {
                    fontSizeDecrease.addEventListener('click', function() {
                        currentFontScale = Math.max(currentFontScale - 0.1, 0.8);
                        document.documentElement.style.fontSize = (currentFontScale * 100) + '%';
                        localStorage.setItem('fontScale', currentFontScale);
                        this.setAttribute('aria-pressed', 'true');
                        setTimeout(() => this.setAttribute('aria-pressed', 'false'), 200);
                    });
                }
                
                if (highContrastToggle) {
                    highContrastToggle.addEventListener('click', function() {
                        document.body.toggleAttribute('data-high-contrast');
                        const isHighContrast = document.body.hasAttribute('data-high-contrast');
                        localStorage.setItem('highContrast', isHighContrast);
                        this.setAttribute('aria-pressed', isHighContrast);
                    });
                }
                
                if (focusOutlineToggle) {
                    focusOutlineToggle.addEventListener('click', function() {
                        document.body.toggleAttribute('data-show-focus');
                        const showFocus = document.body.hasAttribute('data-show-focus');
                        localStorage.setItem('showFocus', showFocus);
                        this.setAttribute('aria-pressed', showFocus);
                    });
                }
                
                // Restore accessibility preferences
                if (currentFontScale !== 1) {
                    document.documentElement.style.fontSize = (currentFontScale * 100) + '%';
                }
                
                const savedHighContrast = localStorage.getItem('highContrast');
                if (savedHighContrast === 'true') {
                    document.body.setAttribute('data-high-contrast', '');
                    if (highContrastToggle) {
                        highContrastToggle.setAttribute('aria-pressed', 'true');
                    }
                }
                
                const savedShowFocus = localStorage.getItem('showFocus');
                if (savedShowFocus === 'true') {
                    document.body.setAttribute('data-show-focus', '');
                    if (focusOutlineToggle) {
                        focusOutlineToggle.setAttribute('aria-pressed', 'true');
                    }
                }
            }
            
            // Reading progress tracking (minimal theme feature)
            function initReadingProgress() {
                let hasStartedReading = false;
                let readingSessions = JSON.parse(localStorage.getItem('readingSessions') || '{}');
                const courseId = '{{course.id}}' || window.location.pathname;
                
                function markAsRead() {
                    if (!hasStartedReading) {
                        hasStartedReading = true;
                        readingSessions[courseId] = {
                            startTime: new Date().toISOString(),
                            lastAccessed: new Date().toISOString()
                        };
                        localStorage.setItem('readingSessions', JSON.stringify(readingSessions));
                    }
                }
                
                // Mark as read when user scrolls or spends time on page
                let timeOnPage = 0;
                const timeThreshold = 30000; // 30 seconds
                
                const interval = setInterval(() => {
                    timeOnPage += 1000;
                    if (timeOnPage >= timeThreshold) {
                        markAsRead();
                        clearInterval(interval);
                    }
                }, 1000);
                
                window.addEventListener('scroll', () => {
                    if (window.scrollY > 100) {
                        markAsRead();
                        clearInterval(interval);
                    }
                });
            }
            
            // Initialize functionality
            function init() {
                updateScrollProgress();
                initSmoothScrolling();
                initKeyboardNavigation();
                initAccessibilityTools();
                initReadingProgress();
                
                // Update scroll progress on scroll and resize
                window.addEventListener('scroll', updateScrollProgress);
                window.addEventListener('resize', updateScrollProgress);
            }
            
            // Initialize when DOM is ready
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', init);
            } else {
                init();
            }
            
            // Print functionality
            window.addEventListener('beforeprint', function() {
                document.body.classList.add('printing');
            });
            
            window.addEventListener('afterprint', function() {
                document.body.classList.remove('printing');
            });
        })();
    </script>
    
    <!-- Analytics -->
    {{#if options.analytics.enabled}}
    <script>
        // Analytics placeholder for minimal template
        console.log('Minimal template loaded for course:', '{{course.title}}');
    </script>
    {{/if}}
</body>
</html>